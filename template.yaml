AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation template for Resume'

Resources:
  LambdaSendMessage:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-lambda-send-message
      Handler: index.handler
      Runtime: nodejs22.x
      Role: !GetAtt LambdaSendMessageRole.Arn
      Code:
        ZipFile: |
          const { SESClient, SendEmailCommand } = require("@aws-sdk/client-ses");

          const sesClient = new SESClient({ region: "us-east-1" }); // Change to your region

          console.log('Loading function');

          module.exports.handler = async (event, context) => {
              console.log('Received event body:', JSON.stringify(event.body, null, 2));
              
              try {
                  // Parse the request body
                  const body = JSON.parse(event.body);
                  console.log('Request body:', body);
                  
                  // Email parameters
                  const params = {
                      Source: 'contact@oussamakhalifeh.com', // Must be verified in SES
                      Destination: {
                          ToAddresses: ['oukhali@hotmail.com'] // Where you want to receive the contact form
                      },
                      Message: {
                          Subject: {
                              Data: 'New Contact Form Submission'
                          },
                          Body: {
                              Text: {
                                  Data: `From: ${body.email}\n\nMessage: ${body.message}`
                              }
                          }
                      }
                  };

                  // Send the email
                  const command = new SendEmailCommand(params);
                  const result = await sesClient.send(command);
                  console.log('Email sent:', result);

                  // Return success response
                  return {
                      statusCode: 200,
                      headers: {
                          'Access-Control-Allow-Headers': 'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token',
                          'Access-Control-Allow-Origin': '*',
                          'Access-Control-Allow-Methods': 'GET, POST, OPTIONS, PUT, DELETE'
                      },
                      body: JSON.stringify({
                          message: 'Email sent successfully'
                      })
                  };
              } catch (error) {
                  console.error('Error:', error);
                  
                  // Return error response
                  return {
                      statusCode: 500,
                      headers: {
                          'Access-Control-Allow-Headers': 'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token',
                          'Access-Control-Allow-Origin': '*',
                          'Access-Control-Allow-Methods': 'GET, POST, OPTIONS, PUT, DELETE'
                      },
                      body: JSON.stringify({
                          message: `Failed to send email due to ${error.message}`
                      })
                  };
              }
          };

  LambdaSendMessageRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-lambda-send-message-role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: AllowSESSend
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ses:SendEmail
                  - ses:SendRawEmail
                Resource: '*'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole


  APIGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub ${AWS::StackName}-api-gateway
      EndpointConfiguration:
        Types:
          - REGIONAL

  APISendMessageResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt APIGateway.RootResourceId
      PathPart: send-message
      RestApiId: !Ref APIGateway

  APIAddVisitorResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt APIGateway.RootResourceId
      PathPart: add-visitor
      RestApiId: !Ref APIGateway

  APIAddVisitorMethodOptions:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref APIGateway
      ResourceId: !Ref APIAddVisitorResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
      Integration:
        Type: MOCK
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{ "statusCode": 200 }'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
  
  APIAddVisitorMethodPost:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref APIGateway
      ResourceId: !Ref APIAddVisitorResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaAddVisitor.Arn}/invocations

  APIGatewaySendMessageMethodOptions:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref APIGateway
      ResourceId: !Ref APISendMessageResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: true
              method.response.header.Access-Control-Allow-Methods: true
              method.response.header.Access-Control-Allow-Origin: true
      Integration:
        Type: MOCK
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{ "statusCode": 200 }'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Origin: "'*'"

  APIGetVisitorCountResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt APIGateway.RootResourceId
      PathPart: get-visitor-count
      RestApiId: !Ref APIGateway

  APIGetVisitorCountMethodOptions:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref APIGateway
      ResourceId: !Ref APIGetVisitorCountResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
      Integration:
        Type: MOCK
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{ "statusCode": 200 }'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET'"
              method.response.header.Access-Control-Allow-Origin: "'*'"

  APIGetVisitorCountMethodPost:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref APIGateway
      ResourceId: !Ref APIGetVisitorCountResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaGetVisitorCount.Arn}/invocations

  BodyOnlyRequestValidator:
    Type: AWS::ApiGateway::RequestValidator
    Properties:
      Name: !Sub ${AWS::StackName}-request-validator
      RestApiId: !Ref APIGateway
      ValidateRequestBody: true

  APIGatewayMethodPost:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref APIGateway
      ResourceId: !Ref APISendMessageResource
      HttpMethod: POST
      AuthorizationType: NONE
      RequestValidatorId: !Ref BodyOnlyRequestValidator
      RequestModels:
        "application/json": !Ref APIEmailAndMessageModel
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaSendMessage.Arn}/invocations

  LambdaSendMessagePermission:
    Type: AWS::Lambda::Permission
    Description: Permission for API Gateway to invoke Lambda.
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt LambdaSendMessage.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${APIGateway}/*

  APIGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: 
      - APIGatewayMethodPost
      - APIGatewaySendMessageMethodOptions
      - APIAddVisitorMethodPost
      - APIAddVisitorMethodOptions
      - APIGetVisitorCountMethodPost
      - APIGetVisitorCountMethodOptions
    Properties:
      RestApiId: !Ref APIGateway
      Description: !Ref AWS::StackName

  APIGatewayStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      RestApiId: !Ref APIGateway
      StageName: prod
      DeploymentId: !Ref APIGatewayDeployment

  APIEmailAndMessageModel:
    Type: AWS::ApiGateway::Model
    Properties:
      RestApiId: !Ref APIGateway
      Name: EmailAndMessageModel
      ContentType: application/json
      Schema:
        {
          "$schema": "http://json-schema.org/draft-04/schema#",
          "title": "ReturnEmailAndMessage",
          "type": "object",
          "properties": {
            "email": {
              "type": "string",
              "format": "email",
              "minLength": 0,
              "maxLength": 254
            },
            "message": {
              "type": "string",
              "minLength": 0,
              "maxLength": 1000
            }
          },
          "required": ["email", "message"],
          "additionalProperties": false
        }

  GatewayResponseDefault4XX:
    Type: AWS::ApiGateway::GatewayResponse
    Properties:
      RestApiId: !Ref APIGateway
      ResponseType: DEFAULT_4XX
      ResponseParameters:
        gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
        gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        gatewayresponse.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
      ResponseTemplates:
        application/json: '{"message":$context.error.messageString}'

  GatewayResponseDefault5XX:
    Type: AWS::ApiGateway::GatewayResponse
    Properties:
      RestApiId: !Ref APIGateway
      ResponseType: DEFAULT_5XX
      ResponseParameters:
        gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
        gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        gatewayresponse.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
      ResponseTemplates:
        application/json: '{"message":$context.error.messageString}'


  DynamoDBVisitorTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${AWS::StackName}-visitor
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: IpAddress
          AttributeType: S
        - AttributeName: Timestamp
          AttributeType: N
      KeySchema:
        - AttributeName: IpAddress
          KeyType: HASH
        - AttributeName: Timestamp
          KeyType: RANGE
          
  LambdaAddVisitor:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-lambda-add-visitor
      Handler: index.handler
      Runtime: nodejs22.x
      Role: !GetAtt LambdaAddVisitorRole.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref DynamoDBVisitorTable
      Code:
        ZipFile: |
          const { DynamoDBClient, PutItemCommand } = require("@aws-sdk/client-dynamodb");

          const ddbClient = new DynamoDBClient({ region: "us-east-1" }); // Change to your region

          module.exports.handler = async (event, context) => {
              console.log('Received event body:', JSON.stringify(event.body, null, 2));

              try {
                  // Parse the request body

                  const params = {
                      TableName: process.env.TABLE_NAME,
                      Item: {
                          IpAddress: { S: event.requestContext.identity.sourceIp },
                          Timestamp: { N: Math.floor(Date.now() / 1000).toString() }
                      }
                  };

                  const command = new PutItemCommand(params);
                  await ddbClient.send(command);

                  return {
                      statusCode: 200,
                      body: JSON.stringify({ message: 'Visitor added successfully' }),
                      headers: {
                        'Access-Control-Allow-Headers': 'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token',
                        'Access-Control-Allow-Origin': '*',
                        'Access-Control-Allow-Methods': 'GET, POST, OPTIONS, PUT, DELETE'
                      }
                  };
              } catch (error) {
                  console.error('Error:', error);
                  return {
                      statusCode: 500,
                      body: JSON.stringify({ message: `Failed to add visitor due to ${error.message}` }),
                      headers: {
                        'Access-Control-Allow-Headers': 'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token',
                        'Access-Control-Allow-Origin': '*',
                        'Access-Control-Allow-Methods': 'GET, POST, OPTIONS, PUT, DELETE'
                      }
                  };
              }
          };

  LambdaAddVisitorPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt LambdaAddVisitor.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${APIGateway}/*
  
  LambdaAddVisitorRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-lambda-add-visitor-role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: AllowDynamoDBPutItem
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                Resource: '*'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  LambdaGetVisitorCount:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-lambda-get-visitor-count
      Handler: index.handler
      Runtime: nodejs22.x
      Role: !GetAtt LambdaGetVisitorCountRole.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref DynamoDBVisitorTable
      Code:
        ZipFile: |
          const { DynamoDBClient, ScanCommand } = require("@aws-sdk/client-dynamodb");

          const ddbClient = new DynamoDBClient({ region: "us-east-1" }); // Change to your region

          module.exports.handler = async (event, context) => {
              console.log('Received event:', JSON.stringify(event, null, 2));

              try {
                  const params = {
                    TableName: process.env.TABLE_NAME
                  };

                  const command = new ScanCommand(params);
                  const result = await ddbClient.send(command);

                  const visitorCount = result.Items ? result.Items.length : 0;

                  return {
                      statusCode: 200,
                      body: JSON.stringify({ visitorCount }),
                      headers: {
                        'Access-Control-Allow-Headers': 'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token',
                        'Access-Control-Allow-Origin': '*',
                        'Access-Control-Allow-Methods': 'GET, POST, OPTIONS, PUT, DELETE'
                      }
                  };
              } catch (error) {
                  console.error('Error:', error);
                  return {
                      statusCode: 500,
                      body: JSON.stringify({ message: `Failed to get visitor count due to ${error.message}` }),
                      headers: {
                        'Access-Control-Allow-Headers': 'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token',
                        'Access-Control-Allow-Origin': '*',
                        'Access-Control-Allow-Methods': 'GET, POST, OPTIONS, PUT, DELETE'
                      }
                  };
              }
          };

  LambdaGetVisitorCountPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt LambdaGetVisitorCount.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${APIGateway}/*

  LambdaGetVisitorCountRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-lambda-get-visitor-count-role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: AllowDynamoDBGetItem
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:Scan
                Resource: '*'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
