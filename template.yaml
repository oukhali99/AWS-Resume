AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation template for Resume'

Resources:
  LambdaSendMessage:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-lambda-send-message
      Handler: index.handler
      Runtime: nodejs22.x
      Role: !GetAtt LambdaSendMessageRole.Arn
      Code:
        ZipFile: |
          import { SESClient, SendEmailCommand } from "@aws-sdk/client-ses";

          const sesClient = new SESClient({ region: "us-east-1" }); // Change to your region

          console.log('Loading function');

          export const handler = async (event, context) => {
              console.log('Received event body:', JSON.stringify(event.body, null, 2));
              
              try {
                  // Parse the request body
                  const body = JSON.parse(event.body);
                  console.log('Request body:', body);
                  
                  // Email parameters
                  const params = {
                      Source: 'contact@oussamakhalifeh.com', // Must be verified in SES
                      Destination: {
                          ToAddresses: ['oukhali@hotmail.com'] // Where you want to receive the contact form
                      },
                      Message: {
                          Subject: {
                              Data: 'New Contact Form Submission'
                          },
                          Body: {
                              Text: {
                                  Data: `From: ${body.email}\n\nMessage: ${body.message}`
                              }
                          }
                      }
                  };

                  // Send the email
                  const command = new SendEmailCommand(params);
                  const result = await sesClient.send(command);
                  console.log('Email sent:', result);

                  // Return success response
                  return {
                      statusCode: 200,
                      headers: {
                          'Access-Control-Allow-Origin': '*',
                          'Access-Control-Allow-Headers': 'Content-Type'
                      },
                      body: JSON.stringify({
                          message: 'Email sent successfully'
                      })
                  };
              } catch (error) {
                  console.error('Error:', error);
                  
                  // Return error response
                  return {
                      statusCode: 500,
                      headers: {
                          'Access-Control-Allow-Origin': '*',
                          'Access-Control-Allow-Headers': 'Content-Type'
                      },
                      body: JSON.stringify({
                          message: `Failed to send email due to ${error.message}`
                      })
                  };
              }
          };

  LambdaSendMessageRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-lambda-send-message-role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: AllowSESSend
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ses:SendEmail
                  - ses:SendRawEmail
                Resource: '*'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  APIGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub ${AWS::StackName}-api-gateway
      EndpointConfiguration:
        Types:
          - REGIONAL

  APISendMessageResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt APIGateway.RootResourceId
      PathPart: send-message
      RestApiId: !Ref APIGateway

  APIGatewayMethodPost:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref APIGateway
      ResourceId: !Ref APISendMessageResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaSendMessage.Arn}/invocations

  APIGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: 
      - APIGatewayMethodPost
    Properties:
      RestApiId: !Ref APIGateway
      Description: !Ref AWS::StackName

  APIGatewayStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      RestApiId: !Ref APIGateway
      StageName: prod
      DeploymentId: !Ref APIGatewayDeployment